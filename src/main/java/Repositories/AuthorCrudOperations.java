package Repositories;import Models.Author;import Settings.DataBaseConnection;import java.sql.*;import java.util.ArrayList;import java.util.List;public class AuthorCrudOperations implements CrudOperations<Author> {    private Connection connection;    public AuthorCrudOperations(Connection connection){        DataBaseConnection.ManagingDataBaseConnection managingDataBaseConnection = new DataBaseConnection.ManagingDataBaseConnection();        this.connection = managingDataBaseConnection.getConnection();    }    @Override    public List<Author> findAll() {        List<Author> authorsList = new ArrayList<>();        try {            String query = "SELECT * FROM authors";            try (PreparedStatement statement = connection.prepareStatement(query);                 ResultSet resultSet = statement.executeQuery()){                while (resultSet.next()){                    Author author= mapResultSetToAuthor(resultSet);                    authorsList.add(author);                }            }        } catch (SQLException e){            throw new RuntimeException(e);        }        return authorsList;    }    @Override    public List<Author> saveAll(List<Author> toSave){        List<Author> savedAuthors = new ArrayList<>();        try {            connection.setAutoCommit(false);            String insertQuery = "INSERT INTO author (id, name, sex) VALUES (?, ?, ?)";            try(PreparedStatement statement = connection.prepareStatement(insertQuery)){                for (Author author : toSave){                    statement.setInt(1, Integer.parseInt(author.getId()));                    statement.setString(2, author.getName());                    statement.setString(3, String.valueOf(author.getSex()));                    statement.addBatch();                }                int[] results = statement.executeBatch();                connection.commit();                for (int result : results){                    if (result == Statement.EXECUTE_FAILED){                        throw new SQLException("Batch execution failed.");                    }                }                savedAuthors.addAll(toSave);            }        } catch (SQLException e){            throw new RuntimeException(e);        }finally {            try{                connection.setAutoCommit(true);            }catch (SQLException e){                throw new RuntimeException(e);            }        }        return savedAuthors;    }    @Override    public Author save(Author toSave){        try {            String insertQuery = "INSERT INTO authors (id, name, sex) VALUES (?, ?, ?)";            try (PreparedStatement statement = connection.prepareStatement(insertQuery)){                statement.setString(1, String.valueOf(Integer.parseInt(toSave.getId())));                statement.setString(2, toSave.getName());                statement.setInt(3, toSave.getSex());                statement.executeUpdate();            }        }catch (SQLException e){            throw new RuntimeException(e);        }        return toSave;    }    @Override    public Author delete (Author toDelete){        try{            String deleteQuery = "DELETE FROM authors WHERE id = ?";            try (PreparedStatement statement = connection.prepareStatement(deleteQuery)){                statement.setString(1, toDelete.getId());                statement.executeUpdate();            }        }catch (SQLException e){            throw new RuntimeException(e);        }        return toDelete;    }    private Author mapResultSetToAuthor(ResultSet resultSet) throws SQLException {        String id = resultSet.getString("id");        String name = resultSet.getString("name");        char sex = resultSet.getString("sex").charAt(0);        Author author = new Author();        author.setId(id);        author.setName(name);        author.setSex(sex);        return author;    }}